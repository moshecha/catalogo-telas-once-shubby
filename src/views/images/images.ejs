<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Subir Imagen</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      padding: 2rem;
      background-color: #f8f9fa;
    }
    #gallery img {
      margin: 0.5rem;
      border-radius: 0.5rem;
      box-shadow: 0 2px 6px rgba(0,0,0,0.2);
    }
    .alert-container {
      position: fixed;
      top: 1rem;
      right: 1rem;
      z-index: 1055;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="mb-4 text-center">Subir Imagen</h1>

    <div class="mb-4 text-center">
      <input type="file" id="imageInput" class="form-control form-control-lg" accept="image/*">
    </div>

    <div class="alert-container" id="alerts"></div>

    <hr>
    <h2 class="mb-3">Galería de Imágenes</h2>
    <div id="gallery" class="d-flex flex-wrap"></div>
  </div>

  <script>
    const MAX_SIZE_MB = 1; // Máximo tamaño permitido 1MB
    const input = document.getElementById('imageInput');
    const gallery = document.getElementById('gallery');
    const alertsContainer = document.getElementById('alerts');

    function showAlert(message, type='success') {
      const alert = document.createElement('div');
      alert.className = `alert alert-${type} alert-dismissible fade show`;
      alert.innerHTML = `${message} <button type="button" class="btn-close" data-bs-dismiss="alert"></button>`;
      alertsContainer.appendChild(alert);

      setTimeout(() => {
        alert.classList.remove('show');
        alert.classList.add('hide');
        setTimeout(() => alert.remove(), 500);
      }, 5000);
    }

    async function loadImages() {
      try {
        const res = await fetch('/images/api/getAllImages');
        const data = await res.json();
        gallery.innerHTML = '';
        data.data.forEach(url => {
          const img = document.createElement('img');
          img.src = url;
          img.width = 150;
          gallery.appendChild(img);
        });
      } catch(e) {
        showAlert('Error cargando imágenes', 'danger');
      }
    }

    function compressImage(file, maxSizeMB) {
      return new Promise((resolve) => {
        if(file.size / (1024*1024) <= maxSizeMB) return resolve(file);

        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = event => {
          const img = new Image();
          img.src = event.target.result;
          img.onload = () => {
            const canvas = document.createElement('canvas');
            const scale = Math.sqrt(maxSizeMB * 1024*1024 / file.size);
            canvas.width = img.width * scale;
            canvas.height = img.height * scale;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
            canvas.toBlob(blob => resolve(new File([blob], file.name, {type: file.type})), file.type, 0.8);
          }
        }
      });
    }

    input.addEventListener('change', async () => {
      if(!input.files.length) return;
      let file = input.files[0];
      if(file.size / (1024*1024) > MAX_SIZE_MB) {
        showAlert('Imagen muy grande, se comprimirá automáticamente', 'warning');
        file = await compressImage(file, MAX_SIZE_MB);
      }

      const formData = new FormData();
      formData.append('image', file);

      try {
        const res = await fetch('/images/api/upload', { method: 'POST', body: formData });
        const result = await res.json();
        if(result.success) {
          showAlert('Imagen subida con éxito', 'success');
          loadImages();
        } else {
          showAlert('Error subiendo imagen', 'danger');
        }
      } catch(e) {
        showAlert('Error en la conexión al servidor', 'danger');
      }

      input.value = ''; // limpiar input
    });

    // Carga inicial
    loadImages();
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
